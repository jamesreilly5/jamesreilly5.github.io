<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: game | The story of Cosmic Badger]]></title>
  <link href="http://blog.cosmicbadger.com/categories/game/atom.xml" rel="self"/>
  <link href="http://blog.cosmicbadger.com/"/>
  <updated>2015-05-28T08:12:08+10:00</updated>
  <id>http://blog.cosmicbadger.com/</id>
  <author>
    <name><![CDATA[James Reilly]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Top 9 tips for indie game developers]]></title>
    <link href="http://blog.cosmicbadger.com/2015/02/12/top-9-tips-for-indie-developers/"/>
    <updated>2015-02-12T20:42:20+11:00</updated>
    <id>http://blog.cosmicbadger.com/2015/02/12/top-9-tips-for-indie-developers</id>
    <content type="html"><![CDATA[<p>Two years ago I started prototyping a html5 game as a side-project while I was in between jobs. Today that project has evolved into a complete game and now it&rsquo;s roughly [&hellip;hopefully] about a month away from app store submission. Over that time I&rsquo;ve come up with a lot of advice that I wish my past self knew when I started and I want to share that information with new and experienced indie developers alike.</p>

<p><strong>1. Don’t design everything at once, play-test early and often</strong></p>

<p>This is really something that tripped me up. This may have not happened to everyone, but I&rsquo;m sure others have encountered it too. I spent a <em>long</em> time designing my levels up front without properly play-testing them one-by-one first. I found that once I had become familiar with the game mechanic and difficulty of one level, the other levels were a little tedious and I had to design all of the levels again, causing a <em>lot</em> of wasted time and effort. Play-test your level the minute you&rsquo;ve finished designing it, it may influence how the rest of the game evolves.</p>

<p><strong>2. Ask for feedback</strong></p>

<p>I’ve seen some great games that have been shared on Reddit and IndieDB (I mean, what the hell is <a href="http://www.indiedb.com/games/push-me-pull-you">this</a>?). Some of which started as a rough concept and then evolved into a great idea by user suggestions. We&rsquo;re not all product managers or professional game designers - ask the public what they want, don&rsquo;t tell them what they want.</p>

<p><strong>3. Be humble</strong></p>

<p>This is a follow up on the previous point. I posted a few images of my game on Imgur and Reddit a while back to get some public response. Some people criticised a few of the backgrounds saying that they were too simple or boring. Initially I was a bit annoyed because I&rsquo;m not a sprite artist and it was the best I could do, but I had to really take a step back and put myself in the mind of the consumer. Are people really going to pay money for a game that is sub-standard given everything else on the market right now? Get feedback, but try not to rubbish people&rsquo;s opinions simply because they&rsquo;re negative or not constructive. Try to take something out of it and don&rsquo;t take it too personally.</p>

<p><strong>4. Decrease your scope</strong></p>

<p>It&rsquo;s great to have so many ideas that you want to implement but that doesn&rsquo;t really matter if you have nothing on any app store to show for it. Start with a minimum viable product and iterate on new ideas later. Chances are that someone playing your game might even suggest a better improvement than your original ideas.</p>

<p><strong>5. Give yourself some time off</strong></p>

<p>I&rsquo;m just going to go ahead and make the assumption that the majority of people reading this will be indie developers working on a personal project outside of their daytime job. Setting goals and deadlines for your game is important, but so is the need to re-energise. I&rsquo;ve rage quit a couple of times and then ditched my game development from a period of weeks to months, simply because I never took a break. Chances are that extra two hours you spent awake last night didn&rsquo;t take much of a chunk off your work. You probably even may have introduced bugs because you were burt out. Watch TV, take your dog for a walk, or just go to the pub for a pint. The work will still be there tomorrow.</p>

<p><strong>6. Ask for help</strong></p>

<p>When I started working on my game I had an stubborn sense of pride regarding doing absolutely everything and being able to claim the credit for it, but we can’t be good at everything. If you know a someone that&rsquo;s good at making sprites then ask them if they can help improve on what you have, ask someone to make music for your game or make a trailer for your app store.</p>

<p><strong>7. Estimate work for each task and then multiply it by five</strong></p>

<p>This isn&rsquo;t really an indie dev problem but a software dev problem. Have you ever said that some new feature was easy to implement and would only take a few hours only to still be swearing at it a week later? I remember telling my work colleagues last September that there were roughly three weeks before I was ready for release. It&rsquo;s now February and I still have bugs to fix and marketing to do before submitting to the app store. Moral of the story, be realistic with effort involved and how much free time you&rsquo;ll actually have on weekends/evenings.</p>

<p><strong>8. <em>Give</em> feedback and engage with the community</strong></p>

<p>Some people might feel like they&rsquo;re fighting an up-hill battle with so much competition out there, but the way I see it is that there&rsquo;s AAA game studios and then there&rsquo;s us. We&rsquo;re not really in competition with each other and there&rsquo;s so many awesome ideas out there that just need a little re-enforcement. Engage with other indie devs on Reddit or any other forums. Tell them how they can improve their idea/gameplay/trailer/marketing, or just tell them that you like what they&rsquo;re doing and to stick with it. You&rsquo;d be surprised how far it goes, it may even give someone the motivation to keep going when they&rsquo;re doubting their own work.</p>

<p><strong>9. Know when to call it a day</strong></p>

<p>I think that most developers can relate to the fact that there&rsquo;s <em>always</em> something that still needs to go into their game, but if it&rsquo;s playable now and it&rsquo;s actually a game now then why not just release it and push the update later? Great things happen in the arena, not when you&rsquo;re in the stands.</p>

<p>That&rsquo;s just a few things that resonated the most for me. Can you relate to any of them? What advice can you give from your own experiences?</p>
]]></content>
  </entry>
  
</feed>
