<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: game engine | The story of Cosmic Badger]]></title>
  <link href="http://blog.cosmicbadger.com/categories/game-engine/atom.xml" rel="self"/>
  <link href="http://blog.cosmicbadger.com/"/>
  <updated>2015-05-28T08:12:08+10:00</updated>
  <id>http://blog.cosmicbadger.com/</id>
  <author>
    <name><![CDATA[James Reilly]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Indie Games Festival - post-mortem]]></title>
    <link href="http://blog.cosmicbadger.com/2015/04/03/indie-games-festival/"/>
    <updated>2015-04-03T16:00:47+11:00</updated>
    <id>http://blog.cosmicbadger.com/2015/04/03/indie-games-festival</id>
    <content type="html"><![CDATA[<p>Last Saturday I had the opportunity to showcase my game to the public for the first time. A few days before I was looking through gamedev posts on reddit and stumbled across a post about open spots for iFest, a free-to-the-public independent game festival in Melbourne. Now I&rsquo;ve never heard anything about the event before, there was next to no press for it and a worrying lack of followers on the official Twitter page so I assumed that it was going to be pretty small-time. It was no PAX for sure; but showcasing here offered a couple of opportunities:</p>

<p><strong> 1. Publicity </strong></p>

<p>Raise a little more awareness about the game and gain a few more followers on Twitter / Facebook</p>

<p><strong> 2. Feedback </strong></p>

<p>Up until this point, the only people that had played or tested the game were friends or colleagues. I&rsquo;m not saying that they aren&rsquo;t capable of giving constructive feedback but first impressions from random punters are going to be a lot more honest, and more accurately reflect the initial reaction once the game goes live on the app stores.</p>

<p><strong> Preparation </strong></p>

<p>The timing was actually pretty bad. I had no paraphernalia or expensive, flashy banners and with a couple of days to prepare <em>and</em> a house move happening on the same weekend the stand wasn&rsquo;t going to be the most professional of displays. It was literally a few hours to mock up some pretty crude posters from existing in-game assets with some social media links on them and rushing to OfficeWorks to get it all printed. The result came out at AU$60 for posters to hang off my stand, 150 business cards (cut up by hand from A4 card prints the night before) and a t-shirt, because that&rsquo;s how professionals roll.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/paraphernalia.jpg' width='' height='' title='What 3 hours accomplishes in paraphernalia'><span class='caption-text'>What 3 hours accomplishes in paraphernalia</span></span></p>

<p><strong> The event </strong></p>

<p>I arrived at iFest around 10am, just in time for it to open to the public and expectations were pretty much accurate. There were about 20 stands there, some of which were flashier than others depending on the studio. I happened to be placed next to a small indie team of five, some of which were ex-EA developers. They were working on a Kickstarter called <a href="https://www.youtube.com/watch?v=POzlC6aTfPs">Space Dust Racers</a>. Their setup was pretty decent compared to what I was about to pullout of the bag. They had a big widescreen TV with multiple X-Box controllers but most importantly, they had a <em>really</em> polished, playable game. It looked closer to a AAA studio game than indie, which made me quite nervous about setting up my stand and how small-time it might look in comparison to others.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/iFest.jpg' width='' height='' title='iFest at Federation Square in Melbourne'><span class='caption-text'>iFest at Federation Square in Melbourne</span></span></p>

<p>I had a shitty old 13&#8221; monitor (which I never even ended up using, partly because of embarrassment) and my MacBook Air for showing my first-cut launch trailer. I fired that up, plopped a test device down on the table with a couple of stacks of business cards. The first half of the day was a slow trickle of people walking through the event, some of which had no idea what the festival actually was. It got busier after lunch time but overall I had only about 30-40 people visit my stand over the course of the 4.5 hours there, which pretty much representative of the event itself.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/iFest-stand.jpg' width='' height='' title='The lemonade stand - we all have to start somewhere'><span class='caption-text'>The lemonade stand - we all have to start somewhere</span></span></p>

<p><strong> Public reaction </strong></p>

<p>So my Twitter following wasn&rsquo;t really going to take off. As uneventful as the day was, none of that really mattered because once people started approaching my stand (no matter how small in number) and started playing my game it really changed my perspective of my own game. I got a range of different demographics from parents and children to software undergrads but pretty much everyone seemed to really enjoy playing <a href="https://www.youtube.com/watch?v=L6zrbYjWO0c">Cosmic Badger</a>. I saw people smile while playing the game, or laughing when the game mechanic finally clicked - that &ldquo;Ah!&rdquo; moment that I wanted people to figure out on their own. Some kept playing for 5-10 minutes at a time, one guy even came back for a second go half an hour later.</p>

<p>Some slightly paraphrased quotes from memory:</p>

<p><strong> Positive feedback </strong></p>

<ul>
<li>&ldquo;that was actually fun&rdquo;</li>
<li>&ldquo;that&rsquo;s a really cool mechanic, I don&rsquo;t think that&rsquo;s ever been done before&rdquo;</li>
<li>&ldquo;I can see myself getting addicted after a while&rdquo;</li>
<li>&ldquo;I love the pastel colour art-style&rdquo;</li>
</ul>


<p><strong> Constructive feedback </strong></p>

<ul>
<li>&ldquo;Some of the obstacles look like they&rsquo;re in the background&rdquo;</li>
<li>&ldquo;Needs some cooler space / time rift effect between the portals&rdquo;</li>
</ul>


<p><strong> Questions </strong></p>

<ul>
<li>&ldquo;So it&rsquo;s portal meets flappy bird?&rdquo;</li>
<li>&ldquo;Why a badger?&rdquo;</li>
</ul>


<p>The things I felt when I first started playing my initial prototype (before the two years worth of work where I had become completely impartial), the things that I wanted others to experience when they picked up the game and started playing were happening, and this was one of the most satisfying and reassuring moments since starting this project.</p>

<p>Most of us indie devs spend months to years working on our own pet projects. During which we constantly doubt ourselves and our abilities, and become almost apathetic to what we&rsquo;re working on. Some of us have seen and played so much of our own game that it&rsquo;s hard to tell if it&rsquo;s actually good any more. Getting strangers&#8217; feedback was one of the most important realisations in this project.</p>

<p>I&rsquo;m hoping to submit my game for app store review this weekend. When it finally releases I have no idea how many people will download it, or even realise it&rsquo;s out there, but at least last weekend I realised that I&rsquo;ve accomplished something. I&rsquo;ve finished a game, someone played it and someone liked it.</p>

<p><strong> Special Mentions </strong></p>

<p>I want to give  a special mention to the two stands each side of me, one which was hobby dev <a href="http://hemingwaygames.com/">Hemmingway Games</a> like me, taking every opportunity outside of his day job to work on his passion. The other is the kickstarter team of 5 working on <a href="http://www.spaceduststudios.com/">Space Dust Racers</a>, who have really earned my respect. They quit their full-time jobs while supporting families to work on their own vision. Asking for a modest amount on Kickstarter, these guys seem more focussed on achieving their goal and earning enough to survive than being greedy. I&rsquo;ve played their game and it was actually really fun, so check them out when they launch.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The level editor - make ALL THE THINGS!]]></title>
    <link href="http://blog.cosmicbadger.com/2015/02/08/building-a-level-editor-in-html5/"/>
    <updated>2015-02-08T18:11:59+11:00</updated>
    <id>http://blog.cosmicbadger.com/2015/02/08/building-a-level-editor-in-html5</id>
    <content type="html"><![CDATA[<p>Map editors are the bread and butter of game development. Without a decent one you may drastically increase the amount of time that it&rsquo;s going to take to build your levels. I&rsquo;m not the most experienced in discussing what&rsquo;s out there but I&rsquo;m going to go ahead and re-iterate the lesson from the <a href="/2015/02/05/technical-implementation-of-a-html5-game/">last post</a>. If you can get away with it, don&rsquo;t bother making your own level editor, use something that&rsquo;s already out there. I didn&rsquo;t listen to this advice at the time because I was a n00b, so I can at least share my creation with the internet.</p>

<p>As discussed in a <a href="/2015/01/26/building-a-game-engine/">previous post</a>, I had just completed a bare-bones html5 game engine and was ready to start designing and populating my game world. Terrain data would be stored in a 2d array and entities would be stored [initially] in a 1d array. This was going to be a game that would move across both X and Y axises so there was no way I was going to hard-code every single level. I just needed a means of building the levels and outputting the JSON representation afterwards.</p>

<p>As I didn&rsquo;t really plan for a level editor in my road map, I was reluctant to put much effor into it though; so here&rsquo;s what it looked like -</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/level_editor.jpg' width='' height='' title='The level editor used for the initial balloon game and the later Cosmic Badger'><span class='caption-text'>The level editor used for the initial balloon game and the later Cosmic Badger</span></span></p>

<p><strong> Adding tiles and entities </strong></p>

<p>The editor initially only displayed the tile sheet to add terrain to the game, but it soon occured to me that I&rsquo;d need to add the ability to add entities too. The whole thing was just a second canvas element. I could pick individual tiles to add to a grid co-ordinate, or select a group of adjacent tiles to drop in the world in one chunk. I could move around in the game world (i.e. the first canvas element) either by using the mouse controls or by using the keyboard up, down, left, right controls. Once I was happy with my world I could print the output to the web console and copy the JSON into the map using the &ldquo;Entity map&rdquo; or &ldquo;Tile map&rdquo; buttons. In retrospect I should have added functionality to auto-save the whole game world without copying and pasting the JSON but like I said, it was a rush job.</p>

<p><strong> Adding boundaries </strong></p>

<p>Then I would have to configure boundaries for each individual tile and entity. I had a debug button to display where the boundaries were (the red squares in the screenshot above) and I would have to manually change each boundary co-ordinates and dimensions until I was happy with them. Apart from making the actual levels, this was one of the most painstaking and monotonous tasks I had to do. I <em>wish</em> I had improved the editor to do this drag-and-drop style.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/boundaries_config.jpg' width='' height='' title='The task of adding boundaries to the game made me die inside a little'><span class='caption-text'>The task of adding boundaries to the game made me die inside a little</span></span></p>

<p><strong> Displaying the grid </strong></p>

<p>Nothing much to say about this, I just needed a means of knowing how much space I had between land masses for judging the game reaction time and therefore the difficulty.</p>

<p><strong> Expanding the game world </strong></p>

<p>This wasn&rsquo;t really built for the purpose of the balloon game, but more so for later on when the game evolved into Cosmic Badger. When I would playtest levels and realised that there wasn&rsquo;t enough distance between obstacles/terrain. I wanted an easy way to split the game world by 32px by adding a new vertical row of tiles to 2d terrain array.</p>

<p><strong> Lessons learned </strong></p>

<p>As much as I play down what&rsquo;s there, the features actually came in really useful for debugging issues in the game. The editor and game logic was being run in real time with boundaries and normal controller input. I could effectively move to any part of the level (albeit slowly using the keyboard controls) and play test the area. I&rsquo;m sure others have different opinions on this, so feel free to start a discussion in the comments section.</p>

<p>Now I had everything I needed to start building a game, time for the &ldquo;fun&rdquo; stuff.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Technical implementation of a game engine]]></title>
    <link href="http://blog.cosmicbadger.com/2015/02/05/technical-implementation-of-a-html5-game/"/>
    <updated>2015-02-05T20:50:28+11:00</updated>
    <id>http://blog.cosmicbadger.com/2015/02/05/technical-implementation-of-a-html5-game</id>
    <content type="html"><![CDATA[<p>I don&rsquo;t really regret building my own game engine given how much I learned from the experience. I do, however, feel that the quality of my game has suffered from not using a framework such as Phaser.js and if I ever [hopefully] make another game one day then I&rsquo;ll be going with something like Unity instead. Why all the negativity, you ask? Let&rsquo;s take a look at the implementation and see.</p>

<p>I chose Javascript to write the engine and game logic as that&rsquo;s the language with which I was most familiar.  I also used a few libraries/tools, which helped me greatly -</p>

<ul>
<li>RequireJS</li>
<li>jQuery</li>
<li>Underscore</li>
<li>Class.js</li>
<li>Grunt</li>
</ul>


<p>RequireJS and jQuery are pretty explanitory, and I just really like Underscore because standard Javascript has such rubbish methods for iterating collections. Class.js is just a slightly nicer looking wrapper (if you don&rsquo;t know what you&rsquo;re doing) to implement inheritance in JavaScript. It was already there from the existing <a href="/2015/01/26/building-a-game-engine/">game skeleton</a> and if I wasn&rsquo;t a bit of a n00b at the time I would have never used it and stuck with Prototype. Grunt was used later down the line to minify and zip up the source code for deployment. I also started the project with the best intentions of TDD&#8217;ing the whole thing, but with a lack of experience at the time and an eagerness to see results in my short time-frame this never quite happened.</p>

<p>So here&rsquo;s a class diagram of the the main bones of the game. I&rsquo;ve excluded some modules as not to over-complicate the diagram but I&rsquo;ll explain the additions in a later post.</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/cosmic_badger_technical_implementation_01.jpg' width='' height='' title='The early Javascript module dependencies of Cosmic Badger'><span class='caption-text'>The early Javascript module dependencies of Cosmic Badger</span></span></p>

<p>It&rsquo;s fairly self-explanitory, the Main module contained a MenuLoader responsible for drawing the menus (this wasn&rsquo;t always the case but I&rsquo;ll cover that in a later post). The MenuLoader was also was responsible for creating a Game. I&rsquo;m not sure that was the best design decision, it&rsquo;s implementation just had the least time impact a very late stage of development. Like I said, I&rsquo;ll cover that later. My Game module consisted of an [initially, 1d] array of entities which made up the enemies (which were just obstacles that weren&rsquo;t bound to 32px grid co-ordinates). The terrain data was just integers stored in a 2d array. The integers corresponded to an image&rsquo;s position in a large tilesheet and the array slot corresponded to the tiles position in the game world, which was tracked by the Camera. This data was stored in the Map module, which is essentially a glorified var containing the JSON game config.</p>

<p>Both the terrain tiles and the entities had their own Sprites (in the case of terrain, a single Sprite), some of which had Animations and Boundries. The Boundry was just a simple box with a width, height and offset co-ordinates from the Sprite image. The Renderer was responsible for drawing the entities and tiles in the Game, the Updater was responsible for updating the Player co-ordinates (based on input from the Controller) and also for checking any boundry collisions via the CollisionDetector. If there was a collision then the Game state would be updated accordingly.</p>

<p>Right, so what&rsquo;s that red box all about? This box is lined with the bleak tinge of remorse. These are my <em>god modules</em> that got way too big with too many responsibilities. They are very tightly coupled and more a reflection of my inexperience at the time. With more software design knowledge, proper tests and the ability to smell when the code needed refactoring then this problem could have been avoided. Changing parts of this code was time consuming, but I knew it well enough to handle it and I&rsquo;m just glad I never had to show it to anyone in an interview. To quote <a href="https://buildkite.com/">BuildKite</a> founder <a href="https://twitter.com/keithpitt">Keith Pitt</a>, it&rsquo;s not legacy code, it&rsquo;s founder code. I wrote that when I founded the company!</p>

<p>Building a game engine from scratch is a really difficult problem. If you haven’t been in the industry for a long time then there’s going to a be a lot of things that you don’t account for; and unless you’re a AAA game development company, my advice right now is to avoid building your own game engine altogether and just focus on building a great game. There’s no shame in sparing yourself the hard work and using something that someone else has already built for you. Having said that, if you just want to learn the ins and outs of game development then doing this is a great exercise.</p>

<p>What about the LevelEditor, you say? Calm down, I&rsquo;ll tell you about that next.</p>
]]></content>
  </entry>
  
</feed>
